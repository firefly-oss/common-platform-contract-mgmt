openapi: 3.0.1
info:
  title: common-platform-contract-mgmt
  description: Contract Management Core Application
  contact:
    name: Firefly Software Solutions Inc
    email: dev@getfirefly.io
  version: 1.0.0
servers:
  - url: http://core.getfirefly.io/contracts
    description: Development Environment
  - url: /
    description: Local Development Environment
tags:
  - name: Contracts
    description: API for managing contracts
  - name: Contract Parties
    description: API for managing parties linked to a contract
  - name: Contract Terms
    description: API for managing contract term dynamics
  - name: Contract Documents
    description: API for managing contract documents
  - name: Contract Events
    description: API for managing contract events
  - name: Contract Status History
    description: API for managing contract status history
  - name: Contract Term Templates
    description: API for managing contract term templates
  - name: Contract Risk Assessments
    description: API for managing contract risk assessments
  - name: Contract Term Validation Rules
    description: API for managing contract term validation rules
paths:
  /api/v1/contracts/{contractId}/terms/{termId}:
    get:
      tags:
        - Contract Terms
      summary: Get contract term by ID
      description: Returns a contract term based on its ID
      operationId: getContractTermById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: termId
          in: path
          description: ID of the contract term to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract term
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermDynamicDTO'
        '404':
          description: Contract term not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Terms
      summary: Update contract term
      description: Updates an existing contract term with the provided information
      operationId: updateContractTerm
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: termId
          in: path
          description: ID of the contract term to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermDynamicDTO'
        required: true
      responses:
        '200':
          description: Contract term successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermDynamicDTO'
        '400':
          description: Invalid contract term data provided
        '404':
          description: Contract term not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Terms
      summary: Delete contract term
      description: Deletes a contract term based on its ID
      operationId: deleteContractTerm
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: termId
          in: path
          description: ID of the contract term to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract term successfully deleted
        '404':
          description: Contract term not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/status-history/{contractStatusHistoryId}:
    get:
      tags:
        - Contract Status History
      summary: Get contract status history by ID
      description: Returns a contract status history based on its ID
      operationId: getContractStatusHistoryById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractStatusHistoryId
          in: path
          description: ID of the contract status history to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract status history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractStatusHistoryDTO'
        '404':
          description: Contract status history not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Status History
      summary: Update contract status history
      description: Updates an existing contract status history with the provided information
      operationId: updateContractStatusHistory
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractStatusHistoryId
          in: path
          description: ID of the contract status history to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractStatusHistoryDTO'
        required: true
      responses:
        '200':
          description: Contract status history successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractStatusHistoryDTO'
        '400':
          description: Invalid contract status history data provided
        '404':
          description: Contract status history not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Status History
      summary: Delete contract status history
      description: Deletes a contract status history based on its ID
      operationId: deleteContractStatusHistory
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractStatusHistoryId
          in: path
          description: ID of the contract status history to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract status history successfully deleted
        '404':
          description: Contract status history not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/risk-assessments/{contractRiskAssessmentId}:
    get:
      tags:
        - Contract Risk Assessments
      summary: Get contract risk assessment by ID
      description: Returns a contract risk assessment based on its ID
      operationId: getContractRiskAssessmentById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractRiskAssessmentId
          in: path
          description: ID of the contract risk assessment to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract risk assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        '404':
          description: Contract risk assessment not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Risk Assessments
      summary: Update contract risk assessment
      description: Updates an existing contract risk assessment with the provided information
      operationId: updateContractRiskAssessment
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractRiskAssessmentId
          in: path
          description: ID of the contract risk assessment to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        required: true
      responses:
        '200':
          description: Contract risk assessment successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        '400':
          description: Invalid contract risk assessment data provided
        '404':
          description: Contract risk assessment not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Risk Assessments
      summary: Delete contract risk assessment
      description: Deletes a contract risk assessment based on its ID
      operationId: deleteContractRiskAssessment
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractRiskAssessmentId
          in: path
          description: ID of the contract risk assessment to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract risk assessment successfully deleted
        '404':
          description: Contract risk assessment not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/parties/{contractPartyId}:
    get:
      tags:
        - Contract Parties
      summary: Get contract party by ID
      description: Returns a contract party based on its ID
      operationId: getContractPartyById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractPartyId
          in: path
          description: ID of the contract party to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractPartyDTO'
        '404':
          description: Contract party not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Parties
      summary: Update contract party
      description: Updates an existing contract party with the provided information
      operationId: updateContractParty
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractPartyId
          in: path
          description: ID of the contract party to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractPartyDTO'
        required: true
      responses:
        '200':
          description: Contract party successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractPartyDTO'
        '400':
          description: Invalid contract party data provided
        '404':
          description: Contract party not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Parties
      summary: Delete contract party
      description: Deletes a contract party based on its ID
      operationId: deleteContractParty
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractPartyId
          in: path
          description: ID of the contract party to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract party successfully deleted
        '404':
          description: Contract party not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/events/{contractEventId}:
    get:
      tags:
        - Contract Events
      summary: Get contract event by ID
      description: Returns a contract event based on its ID
      operationId: getContractEventById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractEventId
          in: path
          description: ID of the contract event to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractEventDTO'
        '404':
          description: Contract event not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Events
      summary: Update contract event
      description: Updates an existing contract event with the provided information
      operationId: updateContractEvent
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractEventId
          in: path
          description: ID of the contract event to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractEventDTO'
        required: true
      responses:
        '200':
          description: Contract event successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractEventDTO'
        '400':
          description: Invalid contract event data provided
        '404':
          description: Contract event not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Events
      summary: Delete contract event
      description: Deletes a contract event based on its ID
      operationId: deleteContractEvent
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractEventId
          in: path
          description: ID of the contract event to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract event successfully deleted
        '404':
          description: Contract event not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/documents/{contractDocumentId}:
    get:
      tags:
        - Contract Documents
      summary: Get contract document by ID
      description: Returns a contract document based on its ID
      operationId: getContractDocumentById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractDocumentId
          in: path
          description: ID of the contract document to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDocumentDTO'
        '404':
          description: Contract document not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Documents
      summary: Update contract document
      description: Updates an existing contract document with the provided information
      operationId: updateContractDocument
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractDocumentId
          in: path
          description: ID of the contract document to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractDocumentDTO'
        required: true
      responses:
        '200':
          description: Contract document successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDocumentDTO'
        '400':
          description: Invalid contract document data provided
        '404':
          description: Contract document not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Documents
      summary: Delete contract document
      description: Deletes a contract document based on its ID
      operationId: deleteContractDocument
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: contractDocumentId
          in: path
          description: ID of the contract document to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract document successfully deleted
        '404':
          description: Contract document not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}:
    get:
      tags:
        - Contracts
      summary: Get contract by ID
      description: Returns a contract based on its ID
      operationId: getContractById
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '404':
          description: Contract not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contracts
      summary: Update contract
      description: Updates an existing contract with the provided information
      operationId: updateContract
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractDTO'
        required: true
      responses:
        '200':
          description: Contract successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '400':
          description: Invalid contract data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contracts
      summary: Delete contract
      description: Deletes a contract based on its ID
      operationId: deleteContract
      parameters:
        - name: contractId
          in: path
          description: ID of the contract to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract successfully deleted
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contract-term-templates/{termTemplateId}/validation-rules/{validationRuleId}:
    get:
      tags:
        - Contract Term Validation Rules
      summary: Get contract term validation rule by ID
      description: Returns a contract term validation rule based on its ID
      operationId: getContractTermValidationRuleById
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the term template
          required: true
          schema:
            type: string
            format: uuid
        - name: validationRuleId
          in: path
          description: ID of the contract term validation rule to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract term validation rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        '404':
          description: Contract term validation rule not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Term Validation Rules
      summary: Update contract term validation rule
      description: Updates an existing contract term validation rule with the provided information
      operationId: updateContractTermValidationRule
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the term template
          required: true
          schema:
            type: string
            format: uuid
        - name: validationRuleId
          in: path
          description: ID of the contract term validation rule to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        required: true
      responses:
        '200':
          description: Contract term validation rule successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        '400':
          description: Invalid contract term validation rule data provided
        '404':
          description: Contract term validation rule not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Term Validation Rules
      summary: Delete contract term validation rule
      description: Deletes a contract term validation rule based on its ID
      operationId: deleteContractTermValidationRule
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the term template
          required: true
          schema:
            type: string
            format: uuid
        - name: validationRuleId
          in: path
          description: ID of the contract term validation rule to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract term validation rule successfully deleted
        '404':
          description: Contract term validation rule not found
        '500':
          description: Internal server error
  /api/v1/contract-term-templates/{termTemplateId}:
    get:
      tags:
        - Contract Term Templates
      summary: Get contract term template by ID
      description: Returns a contract term template based on its ID
      operationId: getContractTermTemplateById
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the contract term template to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved contract term template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermTemplateDTO'
        '404':
          description: Contract term template not found
        '500':
          description: Internal server error
    put:
      tags:
        - Contract Term Templates
      summary: Update contract term template
      description: Updates an existing contract term template with the provided information
      operationId: updateContractTermTemplate
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the contract term template to update
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermTemplateDTO'
        required: true
      responses:
        '200':
          description: Contract term template successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermTemplateDTO'
        '400':
          description: Invalid contract term template data provided
        '404':
          description: Contract term template not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Contract Term Templates
      summary: Delete contract term template
      description: Deletes a contract term template based on its ID
      operationId: deleteContractTermTemplate
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the contract term template to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Contract term template successfully deleted
        '404':
          description: Contract term template not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/terms/filter:
    post:
      tags:
        - Contract Terms
      summary: Filter contract terms
      description: Returns a paginated list of contract terms based on filter criteria
      operationId: filterContractTerms
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractTermDynamicDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/terms:
    post:
      tags:
        - Contract Terms
      summary: Create a new contract term
      description: Creates a new contract term with the provided information
      operationId: createContractTerm
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermDynamicDTO'
        required: true
      responses:
        '201':
          description: Contract term successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermDynamicDTO'
        '400':
          description: Invalid contract term data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/status-history/filter:
    post:
      tags:
        - Contract Status History
      summary: Filter contract status history
      description: Returns a paginated list of contract status history based on filter criteria
      operationId: filterContractStatusHistory
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractStatusHistoryDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract status history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/status-history:
    post:
      tags:
        - Contract Status History
      summary: Create a new contract status history
      description: Creates a new contract status history with the provided information
      operationId: createContractStatusHistory
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractStatusHistoryDTO'
        required: true
      responses:
        '201':
          description: Contract status history successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractStatusHistoryDTO'
        '400':
          description: Invalid contract status history data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/risk-assessments/filter:
    post:
      tags:
        - Contract Risk Assessments
      summary: Filter contract risk assessments
      description: Returns a paginated list of contract risk assessments based on filter criteria
      operationId: filterContractRiskAssessments
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractRiskAssessmentDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract risk assessments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/risk-assessments:
    post:
      tags:
        - Contract Risk Assessments
      summary: Create a new contract risk assessment
      description: Creates a new contract risk assessment with the provided information
      operationId: createContractRiskAssessment
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        required: true
      responses:
        '201':
          description: Contract risk assessment successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        '400':
          description: Invalid contract risk assessment data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/parties/filter:
    post:
      tags:
        - Contract Parties
      summary: Filter contract parties
      description: Returns a paginated list of contract parties based on filter criteria
      operationId: filterContractParties
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractPartyDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract parties
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/parties:
    post:
      tags:
        - Contract Parties
      summary: Create a new contract party
      description: Creates a new contract party with the provided information
      operationId: createContractParty
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractPartyDTO'
        required: true
      responses:
        '201':
          description: Contract party successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractPartyDTO'
        '400':
          description: Invalid contract party data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/events/filter:
    post:
      tags:
        - Contract Events
      summary: Filter contract events
      description: Returns a paginated list of contract events based on filter criteria
      operationId: filterContractEvents
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractEventDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/events:
    post:
      tags:
        - Contract Events
      summary: Create a new contract event
      description: Creates a new contract event with the provided information
      operationId: createContractEvent
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractEventDTO'
        required: true
      responses:
        '201':
          description: Contract event successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractEventDTO'
        '400':
          description: Invalid contract event data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/documents/filter:
    post:
      tags:
        - Contract Documents
      summary: Filter contract documents
      description: Returns a paginated list of contract documents based on filter criteria
      operationId: filterContractDocuments
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractDocumentDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts/{contractId}/documents:
    post:
      tags:
        - Contract Documents
      summary: Create a new contract document
      description: Creates a new contract document with the provided information
      operationId: createContractDocument
      parameters:
        - name: contractId
          in: path
          description: ID of the contract
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractDocumentDTO'
        required: true
      responses:
        '201':
          description: Contract document successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDocumentDTO'
        '400':
          description: Invalid contract document data provided
        '404':
          description: Contract not found
        '500':
          description: Internal server error
  /api/v1/contracts/filter:
    post:
      tags:
        - Contracts
      summary: Filter contracts
      description: Returns a paginated list of contracts based on filter criteria
      operationId: filterContracts
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contracts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contracts:
    post:
      tags:
        - Contracts
      summary: Create a new contract
      description: Creates a new contract with the provided information
      operationId: createContract
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractDTO'
        required: true
      responses:
        '201':
          description: Contract successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDTO'
        '400':
          description: Invalid contract data provided
        '500':
          description: Internal server error
  /api/v1/contract-term-templates/{termTemplateId}/validation-rules/filter:
    post:
      tags:
        - Contract Term Validation Rules
      summary: Filter contract term validation rules
      description: Returns a paginated list of contract term validation rules based on filter criteria
      operationId: filterContractTermValidationRules
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the term template
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractTermValidationRuleDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract term validation rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contract-term-templates/{termTemplateId}/validation-rules:
    post:
      tags:
        - Contract Term Validation Rules
      summary: Create a new contract term validation rule
      description: Creates a new contract term validation rule with the provided information
      operationId: createContractTermValidationRule
      parameters:
        - name: termTemplateId
          in: path
          description: ID of the term template
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        required: true
      responses:
        '201':
          description: Contract term validation rule successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        '400':
          description: Invalid contract term validation rule data provided
        '404':
          description: Term template not found
        '500':
          description: Internal server error
  /api/v1/contract-term-templates/filter:
    post:
      tags:
        - Contract Term Templates
      summary: Filter contract term templates
      description: Returns a paginated list of contract term templates based on filter criteria
      operationId: filterContractTermTemplates
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequestContractTermTemplateDTO'
        required: true
      responses:
        '200':
          description: Successfully retrieved contract term templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '400':
          description: Invalid filter criteria provided
        '500':
          description: Internal server error
  /api/v1/contract-term-templates:
    post:
      tags:
        - Contract Term Templates
      summary: Create a new contract term template
      description: Creates a new contract term template with the provided information
      operationId: createContractTermTemplate
      parameters:
        - name: X-Idempotency-Key
          in: header
          description: Unique key for idempotent requests. If provided, ensures that identical requests with the same key will only be processed once.
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractTermTemplateDTO'
        required: true
      responses:
        '201':
          description: Contract term template successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractTermTemplateDTO'
        '400':
          description: Invalid contract term template data provided
        '500':
          description: Internal server error
components:
  schemas:
    ContractTermDynamicDTO:
      required:
        - contractId
        - effectiveDate
        - termTemplateId
      type: object
      properties:
        termId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        termTemplateId:
          type: string
          format: uuid
        termValueText:
          type: string
        termValueNumeric:
          type: number
        termValueJson:
          $ref: '#/components/schemas/JsonNode'
        effectiveDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
        isActive:
          type: boolean
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    JsonNode:
      type: object
    ContractStatusHistoryDTO:
      required:
        - contractId
        - statusCode
        - statusStartDate
      type: object
      properties:
        contractStatusHistoryId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        statusCode:
          type: string
          enum:
            - CREATED
            - SUBMITTED_FOR_APPROVAL
            - APPROVED
            - REJECTED
            - ACTIVATED
            - SUSPENDED
            - TERMINATED
            - EXPIRED
            - CANCELLED
            - AMENDED
        statusStartDate:
          type: string
          format: date-time
        statusEndDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractRiskAssessmentDTO:
      required:
        - contractId
        - riskLevel
      type: object
      properties:
        contractRiskAssessmentId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        riskScore:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
        riskLevel:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
        assessmentDate:
          type: string
          format: date-time
        assessor:
          maxLength: 255
          minLength: 0
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractPartyDTO:
      required:
        - contractId
        - partyId
        - roleInContractId
      type: object
      properties:
        contractPartyId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        partyId:
          type: string
          format: uuid
        roleInContractId:
          type: string
          format: uuid
        dateJoined:
          type: string
          format: date-time
        dateLeft:
          type: string
          format: date-time
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractEventDTO:
      required:
        - contractId
        - eventType
      type: object
      properties:
        contractEventId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        eventType:
          type: string
          enum:
            - CONTRACT_CREATED
            - CONTRACT_SIGNED
            - CONTRACT_ACTIVATED
            - CONTRACT_AMENDED
            - CONTRACT_RENEWED
            - CONTRACT_SUSPENDED
            - CONTRACT_TERMINATED
            - CONTRACT_EXPIRED
            - MILESTONE_REACHED
            - PAYMENT_DUE
            - PAYMENT_RECEIVED
            - BREACH_REPORTED
            - DISPUTE_RAISED
            - AUDIT_COMPLETED
        eventDate:
          type: string
          format: date-time
        eventDescription:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractDocumentDTO:
      required:
        - contractId
        - documentId
        - documentTypeId
      type: object
      properties:
        contractDocumentId:
          type: string
          format: uuid
          readOnly: true
        contractId:
          type: string
          format: uuid
        documentTypeId:
          type: string
          format: uuid
        documentId:
          type: string
          format: uuid
        dateAdded:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractDTO:
      required:
        - contractStatus
      type: object
      properties:
        contractId:
          type: string
          format: uuid
          readOnly: true
        contractNumber:
          maxLength: 255
          minLength: 0
          type: string
        contractStatus:
          type: string
          enum:
            - DRAFT
            - PENDING_APPROVAL
            - ACTIVE
            - SUSPENDED
            - TERMINATED
            - EXPIRED
            - CANCELLED
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        productCatalogId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractTermValidationRuleDTO:
      required:
        - termTemplateId
        - validationType
      type: object
      properties:
        validationRuleId:
          type: string
          format: uuid
          readOnly: true
        termTemplateId:
          type: string
          format: uuid
        validationType:
          type: string
          enum:
            - REQUIRED
            - MIN_LENGTH
            - MAX_LENGTH
            - MIN_VALUE
            - MAX_VALUE
            - REGEX_PATTERN
            - ENUM_VALUES
            - DATE_RANGE
            - CUSTOM_FUNCTION
        validationValue:
          $ref: '#/components/schemas/JsonNode'
        errorMessage:
          maxLength: 500
          minLength: 0
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    ContractTermTemplateDTO:
      required:
        - code
        - dataType
        - name
        - termCategory
      type: object
      properties:
        termTemplateId:
          type: string
          format: uuid
          readOnly: true
        code:
          maxLength: 100
          minLength: 0
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          maxLength: 1000
          minLength: 0
          type: string
        termCategory:
          type: string
          enum:
            - FINANCIAL
            - LEGAL
            - OPERATIONAL
            - COMPLIANCE
            - PERFORMANCE
            - DELIVERY
            - PAYMENT
            - LIABILITY
            - TERMINATION
            - RENEWAL
            - CUSTOM
        dataType:
          type: string
          enum:
            - STRING
            - NUMBER
            - DECIMAL
            - BOOLEAN
            - DATE
            - DATETIME
            - ENUM
            - JSON
            - MONEY
        isRequired:
          type: boolean
        isActive:
          type: boolean
        defaultValue:
          maxLength: 500
          minLength: 0
          type: string
        validationRules:
          $ref: '#/components/schemas/JsonNode'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    FilterOptions:
      type: object
      properties:
        caseInsensitiveStrings:
          type: boolean
        includeInheritedFields:
          type: boolean
      description: Filter options for customizing filter behavior
    FilterRequestContractTermDynamicDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractTermDynamicDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    PaginationRequest:
      type: object
      properties:
        pageNumber:
          type: integer
          description: The zero-based page number to retrieve.
          format: int32
          example: 0
          default: 0
        pageSize:
          type: integer
          description: The number of items per page.
          format: int32
          example: 10
          default: 10
        sortBy:
          type: string
          description: The field to sort the results by.
          example: name
        sortDirection:
          type: string
          description: The direction of sorting, either ASC or DESC.
          example: DESC
          default: DESC
      description: Represents a pagination request for retrieving paginated results, including page number, size, sort field, and direction.
    RangeFilter:
      type: object
      properties:
        ranges:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RangeObject'
          description: Map of field names to their range criteria
      description: Represents range filters for numeric fields
    RangeObject:
      type: object
      properties:
        from:
          type: object
          description: Start value of the range
        to:
          type: object
          description: End value of the range
      description: Represents a range with from and to values
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          description: The list of items for the current page.
          items:
            type: object
            description: The list of items for the current page.
        totalElements:
          type: integer
          description: The total number of elements across all pages.
          format: int64
        totalPages:
          type: integer
          description: The total number of pages based on the data size and page size.
          format: int32
        currentPage:
          type: integer
          description: The current page number, typically zero-based.
          format: int32
      description: Represents a paginated response containing a list of items and pagination metadata.
    FilterRequestContractStatusHistoryDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractStatusHistoryDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractRiskAssessmentDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractRiskAssessmentDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractPartyDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractPartyDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractEventDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractEventDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractDocumentDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractDocumentDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractTermValidationRuleDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractTermValidationRuleDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination
    FilterRequestContractTermTemplateDTO:
      required:
        - pagination
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContractTermTemplateDTO'
        rangeFilters:
          $ref: '#/components/schemas/RangeFilter'
        pagination:
          $ref: '#/components/schemas/PaginationRequest'
        options:
          $ref: '#/components/schemas/FilterOptions'
      description: Generic filter request that includes both filter criteria and pagination